{"version":3,"sources":["../src/configurator.js"],"names":["validations","value","validation","includes","defaultValues","amendOption","option","name","validTypes","keys","type","Error","default","required","env","amendOptions","mapValues","options","validateSet","validateSave","object","objKeys","requiredKeys","filter","key","each","validateName","test","overwriteFromDefaultValues","overwriteFromEnvValues","_v","process","overwriteFromBotfileValues","config_name","botfile","config","removeUnusedKeys","final","createConfig","kvs","get","set","saveAll","obj","loadAll","then","all","module","exports"],"mappings":"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","file":"configurator.js","sourcesContent":["import _ from 'lodash'\n\nconst validations = {\n  'any': (value, validation) => validation(value),\n  'string': (value, validation) => typeof(value) === 'string' && validation(value),\n  'choice': (value, validation) => _.includes(validation, value),\n  'bool': (value, validation) => (value === true || value === false) && validation(value)\n}\n\nconst defaultValues = {\n  'any': null,\n  'string': '',\n  'bool': false\n}\n\nconst amendOption = (option, name) => {\n\n  const validTypes = _.keys(validations)\n  if (!option.type || !_.includes(validTypes, option.type)) {\n    throw new Error(`Invalid type (${option.type || ''}) for config key (${name})`)\n  }\n\n  const validation = option.validation || (() => true)\n\n  if (typeof(option.default) !== 'undefined' && !validations[option.type](option.default, validation)) {\n    throw new Error(`Invalid default value (${option.default}) for (${name})`)\n  }\n\n  if (!option.default && !_.includes(_.keys(defaultValues), option.type)) {\n    throw new Error(`Default value is mandatory for type ${option.type} (${name})`)\n  }\n\n  return {\n    type: option.type,\n    required: option.required || false,\n    env: option.env || null,\n    default: option.default || defaultValues[option.type],\n    validation: validation\n  }\n}\n\nconst amendOptions = options => {\n  return _.mapValues(options, amendOption)\n}\n\nconst validateSet = (options, name, value) => {\n\n  // if name is not in options, throw\n  if (!_.includes(_.keys(options), name)) {\n    throw new Error(`Unrecognized configuration key: ${name}`)\n  }\n\n  if (!validations[options[name].type](value, options[name].validation)) {\n    throw new Error(`Invalid value for key: ${name}`)\n  }\n}\n\nconst validateSave = (options, object) => {\n  const objKeys = _.keys(object)\n  const requiredKeys = _.filter(_.keys(options), key => options[key].required)\n\n  _.each(requiredKeys, required => {\n    if (!_.includes(objKeys, required)) {\n      throw new Error(`Missing required configuration: '${required}'`)\n    }\n  })\n\n  _.each(objKeys, name => {\n    validateSet(options, name, object[name])\n  })\n}\n\nconst validateName = name => {\n  if (!name || !/^[A-Z0-9._-]+$/i.test(name)) {\n    throw new Error(`Invalid configuration name: ${name}. The name must only contain letters, _ and -`)\n  }\n}\n\nconst overwriteFromDefaultValues = (options, object) => {\n  _.each(_.keys(options), name => {\n    if (typeof object[name] === 'undefined') {\n      object[name] = options[name].default\n    }\n  })\n\n  return object\n}\n\nconst overwriteFromEnvValues = (options, object) => {\n  return _.mapValues(object, (_v, name) => {\n    if (options[name] && options[name].env && process.env[options[name].env]) {\n      return process.env[options[name].env]\n    }\n\n    return _v\n  })\n}\n\nconst overwriteFromBotfileValues = (config_name, options, botfile, object) => {\n  return _.mapValues(object, (_v, name) => {\n    if (botfile && botfile.config && botfile.config[config_name] && typeof botfile.config[config_name][name] !== 'undefined') {\n      return botfile.config[config_name][name]\n    }\n\n    return _v\n  })\n}\n\nconst removeUnusedKeys = (options, object) => {\n  const final = {}\n\n  _.each(_.keys(options), name => {\n    if (typeof object[name] !== 'undefined') {\n      final[name] = object[name]\n    }\n  })\n\n  return final\n}\n\nconst createConfig = ({ kvs, name, botfile = {}, options = {} }) => {\n\n  if (!kvs || !kvs.get || !kvs.set) {\n    throw new Error('A valid \\'kvs\\' is mandatory to createConfig')\n  }\n\n  validateName(name)\n  options = amendOptions(options)\n\n  const saveAll = obj => {\n    validateSave(options, obj)\n    return kvs.set('__config', obj, name)\n  }\n\n  const loadAll = () => {\n    return kvs.get('__config', name)\n    .then(all => overwriteFromDefaultValues(options, all || {}))\n    .then(all => overwriteFromBotfileValues(name, options, botfile, all))\n    .then(all => overwriteFromEnvValues(options, all))\n    .then(all => removeUnusedKeys(options, all))\n  }\n\n  const get = name => {\n    return kvs.get('__config', name + '.' + name)\n    .then(value => overwriteFromDefaultValues(options, { [name]: value }))\n    .then(all => overwriteFromBotfileValues(name, options, botfile, all))\n    .then(all => overwriteFromEnvValues(options, all))\n    .then(obj => obj[name])\n  }\n\n  const set = (name, value) => {\n    validateSet(options, name, value)\n    return kvs.set('__config', value, name + '.' + name)\n  }\n  \n  return { saveAll, loadAll, get, set, options }\n}\n\nmodule.exports = { createConfig }\n"]}