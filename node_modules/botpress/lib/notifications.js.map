{"version":3,"sources":["../src/notifications.js"],"names":["createJsonStore","filePath","initData","load","existsSync","JSON","parse","readFileSync","save","writeFileSync","stringify","data","bindEvents","loadNotifs","saveNotifs","events","on","emit","markReadIf","notifications","map","cond","notif","read","id","dataLocation","notifConfig","modules","logger","notificationsFile","join","file","sendNotif","message","url","level","Error","includes","toLowerCase","callingFile","getOriginatingModule","callingModuleRoot","module","find","mod","root","options","moduleId","icon","name","settings","menuIcon","menuText","notification","v4","date","Date","length","maxLength","pop","unshift","logMessage","info","send","origPrepareStackTrace","prepareStackTrace","_","stack","err","shift","getFileName"],"mappings":"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","file":"notifications.js","sourcesContent":["import _ from 'lodash'\nimport fs from 'fs'\nimport path from 'path'\nimport uuid from 'uuid'\n\nimport { resolveModuleRootPath } from './util'\n\n// TODO this can be an util\nconst createJsonStore = (filePath, initData) => ({\n  load: () => {\n    if (fs.existsSync(filePath)) {\n      return JSON.parse(fs.readFileSync(filePath))\n    }\n\n    return initData\n  },\n\n  save: data => {\n    fs.writeFileSync(filePath, JSON.stringify(data))\n  }\n})\n\nconst bindEvents = (loadNotifs, saveNotifs, events) => {\n  events.on('notifications.getAll', () => {\n    events.emit('notifications.all', loadNotifs())\n  })\n\n  const markReadIf = cond => {\n    const notifications = loadNotifs()\n    .map(notif => {\n      if (cond(notif)) {\n        notif.read = true\n      }\n      return notif\n    })\n\n    saveNotifs(notifications)\n    events.emit('notifications.all', notifications)\n  }\n\n  events.on('notifications.read', (id) => {\n    markReadIf(notif => notif.id === id)\n  })\n\n  events.on('notifications.allRead', () => {\n    markReadIf(() => true)\n  })\n\n  events.on('notifications.trashAll', () => {\n    saveNotifs([])\n    events.emit('notifications.all', [])\n  })\n}\n\nexport default (dataLocation, notifConfig, modules, events, logger) => {\n  const notificationsFile = path.join(dataLocation, notifConfig.file)\n\n  const {\n    load: loadNotifs,\n    save: saveNotifs,\n  } = createJsonStore(notificationsFile, [])\n\n  bindEvents(loadNotifs, saveNotifs, events)\n\n  const sendNotif = ({ message, url, level }) => {\n\n    if (!message || typeof(message) !== 'string') {\n      throw new Error('\\'message\\' is mandatory and should be a string')\n    }\n\n    if (\n      !level || typeof(level) !== 'string' ||\n      !_.includes(['info', 'error', 'success'], level.toLowerCase())\n    ) {\n      level = 'info'\n    } else {\n      level = level.toLowerCase()\n    }\n\n    const callingFile = getOriginatingModule()\n    const callingModuleRoot = callingFile && resolveModuleRootPath(callingFile)\n\n    const module = _.find(modules, (mod) => {\n      return mod.root === callingModuleRoot\n    })\n\n    let options = {\n      // TODO should probably go in settings as defaults\n      moduleId: 'botpress',\n      icon: 'view_module',\n      name: 'botpress',\n      url: url || '/'\n    }\n\n    if (module) {\n      // because the bot itself can send notifications\n      options = {\n        moduleId: module.name,\n        icon: module.settings.menuIcon,\n        name: module.settings.menuText,\n        url: url\n      }\n\n      if (!url || typeof(url) !== 'string') {\n        options.url = `/modules/${module.name}`\n      }\n    }\n\n    const notification = {\n      id: uuid.v4(),\n      message: message,\n      level: level,\n      moduleId: options.moduleId,\n      icon: options.icon,\n      name: options.name,\n      url: options.url,\n      date: new Date(),\n      read: false\n    }\n\n    let notifications = loadNotifs()\n    if (notifications.length >= notifConfig.maxLength) {\n      notifications.pop()\n    }\n\n    notifications.unshift(notification)\n    saveNotifs(notifications)\n\n    events.emit('notifications.new', notification)\n\n    const logMessage = `[notification::${notification.moduleId}] ${notification.message}`\n    if (logger) {\n      (logger[level] || logger.info)(logMessage)\n    }\n  }\n\n  return {\n    load: loadNotifs,\n    save: saveNotifs,\n    send: sendNotif,\n  }\n}\n\nfunction getOriginatingModule() {\n  // TODO Explain hack\n  var origPrepareStackTrace = Error.prepareStackTrace\n  Error.prepareStackTrace = function (_, stack) {\n    return stack\n  }\n  var err = new Error()\n  var stack = err.stack\n  Error.prepareStackTrace = origPrepareStackTrace\n  stack.shift()\n\n  return stack[1].getFileName()\n}\n"]}