{"version":3,"sources":["../../src/cli/migrate.js"],"names":["module","exports","fromVersion","track","existsSync","Error","files","sortBy","readdirSync","join","__dirname","x","toApply","filter","test","f","parseFloat","replace","mapSeries","migration","require","file","resolve","then","print","finally","process","exit"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,OAAOC,OAAP,GAAiB,UAASC,WAAT,EAAsB;AACrC,uBAAM,EAAN,EAAUC,KAAV,CAAgB,KAAhB,EAAuB,WAAvB,EAAoCD,WAApC;;AAEA,MAAI,CAAC,aAAGE,UAAH,CAAc,cAAd,CAAL,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAED,MAAIC,QAAQ,iBAAEC,MAAF,CAAS,aAAGC,WAAH,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,YAArB,CAAf,CAAT,EAA6D;AAAA,WAAKC,CAAL;AAAA,GAA7D,CAAZ;;AAEA,MAAMC,UAAU,iBAAEC,MAAF,CAASP,KAAT,EAAgB,aAAK;AACnC,QAAI,CAAC,QAAQQ,IAAR,CAAaC,CAAb,CAAL,EAAsB;AACpB,aAAO,KAAP;AACD;;AAED,WAAOC,WAAWd,WAAX,IAA0Bc,WAAWD,EAAEE,OAAF,CAAU,OAAV,EAAmB,EAAnB,CAAX,CAAjC;AACD,GANe,CAAhB;;AAQA,SAAO,mBAAQC,SAAR,CAAkBN,OAAlB,EAA2B,gBAAQ;AACxC,QAAMO,YAAYC,QAAQ,eAAKX,IAAL,CAAUC,SAAV,EAAqB,YAArB,EAAmCW,IAAnC,CAAR,CAAlB;AACA,WAAOF,UAAU,eAAKG,OAAL,CAAa,GAAb,CAAV,EACNC,IADM,CACD,YAAM;AACV,qBAAKC,KAAL,CAAW,SAAX,iBAAmCH,KAAKJ,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAnC;AACD,KAHM,CAAP;AAID,GANM,EAONQ,OAPM,CAOE,YAAM;AACb,mBAAKD,KAAL,CAAW,SAAX,EAAsB,sBAAtB;AACAE,YAAQC,IAAR,CAAa,CAAb;AACD,GAVM,CAAP;AAWD,CA5BD","file":"migrate.js","sourcesContent":["import util from '../util'\nimport stats from '../stats'\nimport fs from 'fs'\nimport path from 'path'\nimport _ from 'lodash'\nimport Promise from 'bluebird'\n\nmodule.exports = function(fromVersion) {\n  stats({}).track('cli', 'migration', fromVersion)\n\n  if (!fs.existsSync('./botfile.js')) {\n    throw new Error('You must be inside a bot directory to run a migration')\n  }\n\n  let files = _.sortBy(fs.readdirSync(path.join(__dirname, 'migrations')), x => x)\n\n  const toApply = _.filter(files, f => {\n    if (!/.js$/i.test(f)) {\n      return false\n    }\n\n    return parseFloat(fromVersion) < parseFloat(f.replace(/\\.js/i, ''))\n  })\n\n  return Promise.mapSeries(toApply, file => {\n    const migration = require(path.join(__dirname, 'migrations', file))\n    return migration(path.resolve('.'))\n    .then(() => {\n      util.print('success', `Migration ${file.replace('.js', '')} applied successfully`)\n    })\n  })\n  .finally(() => {\n    util.print('success', 'Migration completed.')\n    process.exit(0)\n  })\n}\n"]}