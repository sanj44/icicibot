{"version":3,"sources":["../../../src/cli/migrations/0.1.js"],"names":["module","exports","botfilePath","join","bot_path","botfile","require","dbLocation","resolve","dataDir","migrate_database_schema","then","migrate_botfile","updateUsers","knex","client","connection","filename","useNullAsDefault","schema","table","string","update","created_on","raw","print","rows","catch","bootstrap","process","env","DELETE_TABLES","dropTableIfExists","tableName","hasTable","has","dropTable","before","readFileSync","toString","indexOf","after","replace","writeFileSync"],"mappings":"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","file":"0.1.js","sourcesContent":["import Knex from 'knex'\nimport path from 'path'\nimport fs from 'fs'\n\nimport kvs from '../../database/kvs'\nimport util from '../../util'\n\nmodule.exports = bot_path => {\n  const botfilePath = path.join(bot_path, 'botfile.js')\n  const botfile = require(botfilePath)\n  const dbLocation = path.resolve(path.join(bot_path, botfile.dataDir, 'db.sqlite'))\n\n  return migrate_database_schema(dbLocation)\n  .then(() => migrate_botfile(botfilePath))\n}\n\n\nfunction migrate_database_schema(dbLocation) {\n\n  const updateUsers = `strftime('%Y-%m-%dT%H:%M:%fZ', created_on/1000, 'unixepoch')`\n\n  const knex = Knex({\n    client: 'sqlite3',\n    connection: { filename: dbLocation },\n    useNullAsDefault: true\n  })\n\n  return knex.schema.table('users', function (table) {\n    table.string('picture_url')\n    table.string('first_name')\n    table.string('last_name')\n  })\n  .then(() => knex('users').update({ created_on: knex.raw(updateUsers) }))\n  .then(rows => {\n    util.print('info', 'Updated ' + rows + ' users')\n    util.print('warn', 'Users table was migrated to new schema but existing users will miss the following fields: `picture_url`, `first_name`, `last_name`. They have been left to `null`.')\n  })\n  .catch(() => {\n    util.print('warn', 'Did not migrate table `users` as schema was already up to date')\n  })\n  .then(() => kvs(knex).bootstrap())\n  .catch(() => {\n    util.print('warn', 'Did not create table `kvs` as schema was already up to date')\n  })\n  .then(() => {\n\n    if (!process.env.DELETE_TABLES) {\n      util.print('warn', \"This migration must delete the tables of the following modules: `botpress-scheduler`, `botpress-analytics`, `botpress-hitl` and `botpress-subscription`.\")\n      util.print('warn', \"This step has been skipped because you didn't provide the DELETE_TABLES=true environement variable.\")\n      util.print('warn', \"Please backup your data if necessary then re-run with DELETE_TABLES=true\")\n      return false\n    }\n\n    return dropTableIfExists(knex, 'analytics_interactions')\n    .then(() => dropTableIfExists(knex, 'analytics_runs'))\n    .then(() => dropTableIfExists(knex, 'broadcast_outbox'))\n    .then(() => dropTableIfExists(knex, 'broadcast_schedules'))\n    .then(() => dropTableIfExists(knex, 'hitl_messages'))\n    .then(() => dropTableIfExists(knex, 'hitl_sessions'))\n    .then(() => dropTableIfExists(knex, 'subscription_users'))\n    .then(() => dropTableIfExists(knex, 'subscriptions'))\n    .then(() => dropTableIfExists(knex, 'scheduler_schedules'))\n    .then(() => dropTableIfExists(knex, 'scheduler_tasks'))\n    .then(() => util.print('info', 'Dropped module tables'))\n  })\n}\n\nfunction dropTableIfExists(knex, tableName) {\n  return knex.schema.hasTable(tableName)\n  .then(has => {\n    if (has) {\n      return knex.schema.dropTable(tableName)\n    }\n  })\n}\n\nfunction migrate_botfile(botfilePath) {\n  const before = fs.readFileSync(botfilePath).toString()\n\n  if (before.indexOf('postgres:') >= 0) {\n    util.print('warn', 'Did not migrate botfile as it seemed like `postgres` was already present. Please migrate manually if this is a mistake.')\n    return false\n  }\n\n  const after = before.replace(/module\\.exports.*?=.*?{/i, `module.exports = {\n\n  /**\n  * Postgres configuration\n  */\n  postgres: {\n    enabled: process.env.DATABASE === 'postgres',\n    host: process.env.PG_HOST || '127.0.0.1',\n    port: process.env.PG_PORT || 5432,\n    user: process.env.PG_USER || '',\n    password: process.env.PG_PASSWORD || '',\n    database: process.env.PG_DB || ''\n  },`)\n\n  fs.writeFileSync(botfilePath, after)\n\n  util.print('info', 'Updated botfile')\n}\n"]}