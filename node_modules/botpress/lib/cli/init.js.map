{"version":3,"sources":["../../src/cli/init.js"],"names":["introductionText","waitingText","nextStepText","bold","assertDoesntExist","file","existsSync","print","process","exit","getTemplate","template","templatePath","join","__dirname","templateContent","readFileSync","generateTemplate","filename","variables","compiled","destination","replace","writeFileSync","generate","result","mkdirSync","install","npmCmd","stdout","on","data","write","toString","stderr","code","module","exports","program","track","each","currentDirectoryName","basename","resolve","schema","properties","name","description","white","pattern","message","required","default","author","version","yes","delimiter","start","get","err"],"mappings":"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","file":"init.js","sourcesContent":["import { spawn } from 'child_process'\nimport prompt from 'prompt'\nimport chalk from 'chalk'\nimport path from 'path'\nimport _ from 'lodash'\nimport fs from 'fs'\nimport util from '../util'\nimport stats from '../stats'\n\nconst introductionText = \"\\nHey there, thanks for using botpress!\" +\n  \"\\nWe'll walk you through the creation of your new bot.\" +\n  \"\\nFor more information or help, please visit http://github.com/botpress/botpress\"\n  + \"\\n---------------\"\n\nconst waitingText = 'please wait, we are installing everything for you...'\nconst nextStepText = 'now run ' + chalk.bold('`bp start`') + ' in your terminal'\n\nconst assertDoesntExist = (file) => {\n  if (fs.existsSync(file)) {\n    util.print('error', 'package.json or botfile.js are already in repository, remove them before running this command again.')\n    process.exit(1)\n  }\n}\n\nconst getTemplate = (template) => {\n  const templatePath = path.join(__dirname, 'templates/init', template)\n  const templateContent = fs.readFileSync(templatePath)\n  return _.template(templateContent)\n}\n\nconst generateTemplate = (filename, variables = {}) => {\n  const template = getTemplate(filename)\n  const compiled = template(variables)\n  const destination = path.join(filename.replace(/_\\._/, '.'))\n  fs.writeFileSync(destination, compiled)\n}\n\nconst generate = (result) => {\n  generateTemplate('package.json', result)\n  generateTemplate('LICENSE')\n  generateTemplate('botfile.js')\n  generateTemplate('index.js')\n  generateTemplate('_._gitignore')\n  generateTemplate('_._welcome')\n  generateTemplate('theme.scss')\n\n  fs.mkdirSync('data')\n  fs.writeFileSync('data/bot.log', '')\n  fs.writeFileSync('data/notification.json', '[]')\n\n  fs.mkdirSync('modules_config')\n\n  util.print(waitingText)\n  const install = spawn(util.npmCmd, ['install'])\n\n  install.stdout.on('data', (data) => {\n    process.stdout.write(data.toString())\n  })\n\n  install.stderr.on('data', (data) => {\n    process.stdout.write(data.toString())\n  })\n\n  install.on('close', (code) => {\n    if (code > 0) {\n      util.print('error', 'an error occured during installation')\n    } else {\n      util.print('success', 'installation has completed successfully')\n      util.print(nextStepText)\n    }\n  })\n}\n\nmodule.exports = function(program) {\n  stats({}).track('cli', 'bot', 'init')\n\n  util.print(introductionText)\n\n  _.each(['package.json', 'botfile.js', 'index.js'], assertDoesntExist)\n\n  const currentDirectoryName = path.basename(path.resolve('./'))\n\n  var schema = {\n    properties: {\n      name: {\n        description: chalk.white('name:'),\n        pattern: /^[a-z0-9][a-z0-9-_\\.]+$/,\n        message: 'name must be only lowercase letters, ' +\n          'digits, dashes, underscores and dots.',\n        required: true,\n        default: currentDirectoryName\n      },\n      description: {\n        required: false,\n        description: chalk.white('description:')\n      },\n      author: {\n        required: false,\n        description: chalk.white('author:')\n      },\n      version: {\n        required: false,\n        description: chalk.white('version:'),\n        default: '0.0.1'\n      },\n    }\n  }\n\n  if (program.yes) {\n    generate({\n      name: currentDirectoryName,\n      description: '',\n      author: '',\n      version: '0.0.1'\n    })\n  } else {\n    prompt.message = ''\n    prompt.delimiter = ''\n    prompt.start()\n    prompt.get(schema, function (err, result) {\n      generate(result)\n    })\n  }\n}\n"]}