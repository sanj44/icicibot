{"version":3,"sources":["../../src/cli/create.js"],"names":["MODULE_NAME_CONVENTION_BEGINS","MODULE_NAME_REGEX","RegExp","introductionText","doneText","documentation","getTemplate","template","templatePath","join","__dirname","templateContent","readFileSync","generateTemplate","directory","filename","variables","compiled","destination","replace","writeFileSync","prefixModuleNameWithBotpress","test","name","print","bold","module","exports","moduleDirectory","resolve","dirname","basename","track","schema","properties","description","white","pattern","message","required","default","author","version","delimiter","start","get","err","result","existsSync","process","exit","mkdirSync","install","npmCmd","stdout","on","data","write","toString","stderr","code"],"mappings":"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","file":"create.js","sourcesContent":["import { spawn } from 'child_process'\nimport prompt from 'prompt'\nimport chalk from 'chalk'\nimport path from 'path'\nimport fs from 'fs'\nimport _ from 'lodash'\nimport util from '../util'\nimport stats from '../stats'\n\nconst MODULE_NAME_CONVENTION_BEGINS = 'botpress-'\nconst MODULE_NAME_REGEX = new RegExp(/^botpress-.*/g)\n\nconst introductionText = \"This program will bootstrap a new Botpress module\"\nconst doneText = \"You're all set! The module is boostrapped and ready to be developed.\"\nconst documentation = \"Tip: when coding your bot, use the command `npm run watch` to recompile\" +\n  \" your module automatically. Also, we strongly recommend that you install your module using \" +\n  \"`npm link ../path/to/botpress-module` so that your bot always points to the most recent version.\"\n\nconst getTemplate = (template) => {\n  const templatePath = path.join(__dirname, 'templates/create' , template)\n  const templateContent = fs.readFileSync(templatePath)\n  return _.template(templateContent)\n}\n\nconst generateTemplate = (directory, filename, variables = {}) => {\n  const template = getTemplate(filename)\n  const compiled = template(variables)\n  const destination = path.join(directory, filename.replace(/_\\._/, '.'))\n  fs.writeFileSync(destination, compiled)\n}\n\nconst prefixModuleNameWithBotpress = name => {\n\n  if (!MODULE_NAME_REGEX.test(name)) {\n    util.print('warn','the name of your module needs to begin by \"botpress-\"')\n    util.print('warn','we renamed your module to '+ chalk.bold(MODULE_NAME_CONVENTION_BEGINS + name))\n    name = MODULE_NAME_CONVENTION_BEGINS + name\n  }\n\n  return name\n}\n\n\nmodule.exports = function() {\n  const moduleDirectory = path.resolve('.')\n  const dirname = path.basename(moduleDirectory)\n\n  stats({}).track('cli', 'modules', 'create')\n\n  util.print(introductionText)\n\n  var schema = {\n    properties: {\n      name: {\n        description: chalk.white('module name:'),\n        pattern: /^[a-z0-9][a-z0-9-_\\.]+$/,\n        message: 'name must be only lowercase letters, ' +\n          'digits, dashes, underscores and dots.',\n        required: true,\n        default: dirname\n      },\n      description: {\n        required: false,\n        description: chalk.white('description:')\n      },\n      author: {\n        required: false,\n        description: chalk.white('author:')\n      },\n      version: {\n        required: false,\n        description: chalk.white('version:'),\n        default: '1.0.0'\n      }\n    }\n  }\n\n  prompt.message = ''\n  prompt.delimiter = ''\n\n  prompt.start()\n\n  prompt.get(schema, function (err, result) {\n    result.name = prefixModuleNameWithBotpress(result.name)\n    \n    \n    if (dirname !== result.name) {\n      util.print('warn', `We usually recommend that the name of the module directory (${dirname}) be the same as the module name (${result.name})`)\n    }\n\n    if (fs.existsSync(path.join(moduleDirectory, 'package.json'))) {\n      util.print('error', \"Expected module directory to be empty / uninitialized\")\n      process.exit(1)\n    } else {\n      generateTemplate(moduleDirectory, 'package.json', result)\n      generateTemplate(moduleDirectory, 'LICENSE')\n      generateTemplate(moduleDirectory, 'webpack.js')\n      generateTemplate(moduleDirectory, '_._gitignore')\n      generateTemplate(moduleDirectory, '_._npmignore')\n\n      fs.mkdirSync(moduleDirectory + '/src')\n      generateTemplate(moduleDirectory, 'src/index.js')\n\n      fs.mkdirSync(moduleDirectory + '/src/views')\n      generateTemplate(moduleDirectory, 'src/views/index.jsx')\n      generateTemplate(moduleDirectory, 'src/views/style.scss')\n\n      util.print('Installing dependencies, please wait...')\n\n      const install = spawn(util.npmCmd, ['install'])\n\n      install.stdout.on('data', (data) => {\n        process.stdout.write(data.toString())\n      })\n\n      install.stderr.on('data', (data) => {\n        process.stdout.write(data.toString())\n      })\n\n      install.on('close', (code) => {\n        if (code > 0) {\n          util.print('error', 'An error occured during the dependencies installation of your module')\n        } else {\n          util.print('success', 'Module dependencies installed')\n          util.print(doneText)\n          util.print(documentation)\n        }\n      })\n    }\n  })\n}\n"]}