{"version":3,"sources":["../../src/database/index.js"],"names":["initializeCoreDatabase","knex","Error","mapSeries","fn","module","exports","sqlite","postgres","getDb","resolve","enabled","require","client","connection","host","port","user","password","database","ssl","useNullAsDefault","filename","location","then","saveUser","id","platform","gender","timezone","locale","picture_url","first_name","last_name","userId","userRow","created_on","Date","toISOString","query","insert","where","select","raw","from","toString","replace","kvs_instance","getKvs","bootstrap","kvsGet","args","arguments","instance","get","apply","kvsSet","set","kvs"],"mappings":"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","file":"index.js","sourcesContent":["import Promise from 'bluebird'\nimport moment from 'moment'\n\nimport coreTables from './core_tables'\nimport kvs from './kvs'\n\nconst initializeCoreDatabase = knex => {\n  if (!knex) {\n    throw new Error('You must initialize the database before')\n  }\n\n  return Promise.mapSeries(coreTables, fn => fn(knex))\n}\n\nmodule.exports = ({ sqlite, postgres }) => {\n\n  let knex = null\n\n  const getDb = () => {\n    if (knex) {\n      return Promise.resolve(knex)\n    }\n\n    if (postgres.enabled) {\n      knex = require('knex')({\n        client: 'pg',\n        connection: {\n          host: postgres.host,\n          port: postgres.port,\n          user: postgres.user,\n          password: postgres.password,\n          database: postgres.database,\n          ssl: postgres.ssl\n        },\n        useNullAsDefault: true\n      })\n    } else {\n      knex = require('knex')({\n        client: 'sqlite3',\n        connection: { filename: sqlite.location },\n        useNullAsDefault: true\n      })\n    }\n\n    return initializeCoreDatabase(knex)\n    .then(() => knex)\n  }\n\n  const saveUser = ({ id, platform, gender, timezone, locale, picture_url, first_name, last_name }) => {\n    const userId = platform + ':' + id\n    const userRow = {\n      id: userId,\n      userId: id,\n      platform: platform,\n      gender: gender || 'unknown',\n      timezone: timezone || null,\n      locale: locale || null,\n      created_on: moment(new Date()).toISOString(),\n      picture_url: picture_url,\n      last_name: last_name,\n      first_name: first_name\n    }\n\n    return getDb()\n    .then(knex => {\n      var query = knex('users').insert(userRow)\n      .where(function() {\n        return this\n          .select(knex.raw(1))\n          .from('users')\n          .where('id', '=', userId)\n      })\n\n      if (postgres.enabled) {\n        query = `${query} on conflict (id) do nothing`\n      } else { // SQLite\n        query = query.toString().replace(/^insert/i, 'insert or ignore')\n      }\n\n      return knex.raw(query)\n    })\n  }\n\n  let kvs_instance = null\n  const getKvs = () => {\n    if (!kvs_instance) {\n      return getDb()\n      .then(knex => {\n        kvs_instance = new kvs(knex)\n        return kvs_instance.bootstrap()\n        .then(() => kvs_instance)\n      })\n    } else {\n      return Promise.resolve(kvs_instance)\n    }\n  }\n\n  const kvsGet = function() {\n    const args = arguments\n    return getKvs()\n    .then(instance => instance.get.apply(null, args))\n  }\n\n  const kvsSet = function() {\n    const args = arguments\n    return getKvs()\n    .then(instance => instance.set.apply(null, args))\n  }\n\n  return {\n    get: getDb,\n    saveUser,\n    location: postgres.enabled ? 'postgres' : sqlite.location,\n    kvs: { get: kvsGet, set: kvsSet }\n  }\n}\n"]}