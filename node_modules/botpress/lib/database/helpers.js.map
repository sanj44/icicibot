{"version":3,"sources":["../../src/database/helpers.js"],"names":["isLite","knex","client","config","module","exports","dateParse","raw","exp","dateFormat","iso","date","toDate","toISOString","columnOrDateFormat","lite","colOrDate","sql","createTableIfNotExists","tableName","cb","schema","hasTable","then","exists","format","now","isBefore","d1","d2","isAfter","isBetween","d3","isSameDay","hourOfDay","bool","true","false","parse","value"],"mappings":";;AAKA;;;;;;AAEA,IAAMA,UAAS,SAATA,OAAS,OAAQ;AACrB,SAAOC,KAAKC,MAAL,CAAYC,MAAZ,CAAmBD,MAAnB,KAA8B,SAArC;AACD,CAFD,C,CAPA;;;;;AAWAE,OAAOC,OAAP,GAAiB,gBAAQ;;AAEvB,MAAMC,YAAY,SAAZA,SAAY,MAAO;AACvB,WAAON,QAAOC,IAAP,IACLA,KAAKM,GAAL,uCAA2CC,GAA3C,OADK,GAELP,KAAKM,GAAL,CAASC,GAAT,CAFF;AAGD,GAJD;;AAMA,MAAMC,aAAa,SAAbA,UAAa,OAAQ;AACzB,QAAMC,MAAM,sBAAOC,IAAP,EAAaC,MAAb,GAAsBC,WAAtB,EAAZ;AACA,WAAOP,iBAAcI,GAAd,QAAP;AACD,GAHD;;AAKA,MAAMI,qBAAqB,SAArBA,kBAAqB,YAAa;AACtC,QAAMC,OAAOf,QAAOC,IAAP,CAAb;;AAEA,QAAIe,UAAUC,GAAd,EAAmB;AACjB,aAAOD,UAAUC,GAAjB;AACD;;AAED,QAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AACjC,aAAOD,OAAOT,UAAUU,SAAV,CAAP,SAAkCA,SAAlC,MAAP;AACD;;AAED,WAAOP,WAAWO,SAAX,CAAP;AACD,GAZD;;AAcA,SAAO;AACLhB,YAAQ;AAAA,aAAMA,QAAOC,IAAP,CAAN;AAAA,KADH;;AAGL;AACA;AACAiB,4BAAwB,gCAACC,SAAD,EAAYC,EAAZ,EAAmB;AACzC,aAAOnB,KAAKoB,MAAL,CAAYC,QAAZ,CAAqBH,SAArB,EACNI,IADM,CACD,kBAAU;AACd,YAAIC,MAAJ,EAAY;AAAE;AAAQ;AACtB,eAAOvB,KAAKoB,MAAL,CAAYH,sBAAZ,CAAmCC,SAAnC,EAA8CC,EAA9C,CAAP;AACD,OAJM,CAAP;AAKD,KAXI;;AAaLT,UAAM;AACJc,cAAQhB,UADJ;;AAGJiB,WAAK;AAAA,eAAM1B,QAAOC,IAAP,IAAeA,KAAKM,GAAL,CAAS,uCAAT,CAAf,GAAmEN,KAAKM,GAAL,CAAS,OAAT,CAAzE;AAAA,OAHD;;AAKJoB,gBAAU,kBAACC,EAAD,EAAKC,EAAL,EAAY;AACpBD,aAAKd,mBAAmBc,EAAnB,CAAL;AACAC,aAAKf,mBAAmBe,EAAnB,CAAL;;AAEA,eAAO5B,KAAKM,GAAL,CAASqB,KAAK,KAAL,GAAaC,EAAtB,CAAP;AACD,OAVG;;AAYJC,eAAS,iBAACF,EAAD,EAAKC,EAAL,EAAY;AACnBD,aAAKd,mBAAmBc,EAAnB,CAAL;AACAC,aAAKf,mBAAmBe,EAAnB,CAAL;;AAEA,eAAO5B,KAAKM,GAAL,CAASqB,KAAK,KAAL,GAAaC,EAAtB,CAAP;AACD,OAjBG;;AAmBJE,iBAAW,mBAACH,EAAD,EAAKC,EAAL,EAASG,EAAT,EAAgB;AACzBJ,aAAKd,mBAAmBc,EAAnB,CAAL;AACAC,aAAKf,mBAAmBe,EAAnB,CAAL;AACAG,aAAKlB,mBAAmBkB,EAAnB,CAAL;;AAEA,eAAO/B,KAAKM,GAAL,CAAYqB,EAAZ,iBAA0BC,EAA1B,aAAoCG,EAApC,CAAP;AACD,OAzBG;;AA2BJC,iBAAW,mBAACL,EAAD,EAAKC,EAAL,EAAY;AACrBD,aAAKd,mBAAmBc,EAAnB,CAAL;AACAC,aAAKf,mBAAmBe,EAAnB,CAAL;;AAEA,eAAO5B,KAAKM,GAAL,WAAiBqB,EAAjB,iBAA+BC,EAA/B,OAAP;AACD,OAhCG;;AAkCJK,iBAAW,yBAAQ;AACjBvB,eAAOG,mBAAmBH,IAAnB,CAAP;AACA,eAAOX,QAAOC,IAAP,IACHA,KAAKM,GAAL,uBAA2BI,IAA3B,OADG,GAEHV,KAAKM,GAAL,cAAoBI,IAApB,iBAFJ;AAGD;AAvCG,KAbD;;AAuDLwB,UAAM;;AAEJC,YAAM;AAAA,eAAMpC,QAAOC,IAAP,IAAe,CAAf,GAAmB,IAAzB;AAAA,OAFF;AAGJoC,aAAO;AAAA,eAAMrC,QAAOC,IAAP,IAAe,CAAf,GAAmB,KAAzB;AAAA,OAHH;AAIJqC,aAAO;AAAA,eAAStC,QAAOC,IAAP,IAAe,CAAC,CAACsC,KAAjB,GAAyBA,KAAlC;AAAA;;AAJH;;AAvDD,GAAP;AAgED,CA3FD","file":"helpers.js","sourcesContent":["/*\n  The goal of these helpers is to generate SQL queries\n  that are valid for both SQLite and Postgres\n*/\n\nimport moment from 'moment'\n\nconst isLite = knex => {\n  return knex.client.config.client === 'sqlite3'\n}\n\nmodule.exports = knex => {\n\n  const dateParse = exp => {\n    return isLite(knex)\n    ? knex.raw(`strftime('%Y-%m-%dT%H:%M:%fZ', ${exp})`)\n    : knex.raw(exp)\n  }\n\n  const dateFormat = date => {\n    const iso = moment(date).toDate().toISOString()\n    return dateParse(`'${iso}'`)\n  }\n\n  const columnOrDateFormat = colOrDate => {\n    const lite = isLite(knex)\n\n    if (colOrDate.sql) {\n      return colOrDate.sql\n    }\n\n    if (typeof colOrDate === 'string') {\n      return lite ? dateParse(colOrDate) : `\"${colOrDate}\"`\n    }\n\n    return dateFormat(colOrDate)\n  }\n\n  return {\n    isLite: () => isLite(knex),\n\n    // knex's createTableIfNotExists doesn't work with postgres\n    // https://github.com/tgriesser/knex/issues/1303\n    createTableIfNotExists: (tableName, cb) => {\n      return knex.schema.hasTable(tableName)\n      .then(exists => {\n        if (exists) { return }\n        return knex.schema.createTableIfNotExists(tableName, cb)\n      })\n    },\n\n    date: {\n      format: dateFormat,\n\n      now: () => isLite(knex) ? knex.raw(\"strftime('%Y-%m-%dT%H:%M:%fZ', 'now')\") : knex.raw('now()'),\n\n      isBefore: (d1, d2) => {\n        d1 = columnOrDateFormat(d1)\n        d2 = columnOrDateFormat(d2)\n\n        return knex.raw(d1 + ' < ' + d2)\n      },\n\n      isAfter: (d1, d2) => {\n        d1 = columnOrDateFormat(d1)\n        d2 = columnOrDateFormat(d2)\n\n        return knex.raw(d1 + ' > ' + d2)\n      },\n\n      isBetween: (d1, d2, d3) => {\n        d1 = columnOrDateFormat(d1)\n        d2 = columnOrDateFormat(d2)\n        d3 = columnOrDateFormat(d3)\n\n        return knex.raw(`${d1} BETWEEN ${d2} AND ${d3}`)\n      },\n\n      isSameDay: (d1, d2) => {\n        d1 = columnOrDateFormat(d1)\n        d2 = columnOrDateFormat(d2)\n\n        return knex.raw(`date(${d1}) = date(${d2})`)\n      },\n\n      hourOfDay: date => {\n        date = columnOrDateFormat(date)\n        return isLite(knex)\n          ? knex.raw(`strftime('%H', ${date})`)\n          : knex.raw(`to_char(${date}, 'HH24')`)\n      }\n    },\n\n    bool: {\n\n      true: () => isLite(knex) ? 1 : true,\n      false: () => isLite(knex) ? 0 : false,\n      parse: value => isLite(knex) ? !!value : value\n\n    }\n\n  }\n}\n"]}