{"version":3,"sources":["../../src/database/kvs.js"],"names":["module","exports","knex","options","getSetCallback","betweenGetAndSetCallback","resolve","tableName","get","key","path","where","limit","then","row","obj","JSON","parse","value","at","set","now","date","setValue","original","newObj","Object","assign","update","stringify","modified_on","insert","bootstrap","createTableIfNotExists","table","string","primary","text","timestamp"],"mappings":";;AAAA;;;;AACA;;;;AAEA;;;;;;AAEA;;;;;;AAMAA,OAAOC,OAAP,GAAiB,UAACC,IAAD,EAAwB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AACvC,MAAMC,iBAAiBD,QAAQE,wBAAR,IAAqC;AAAA,WAAM,mBAAQC,OAAR,EAAN;AAAA,GAA5D;AACA,MAAMC,YAAYJ,QAAQI,SAAR,IAAqB,KAAvC;;AAEA,MAAMC,MAAM,SAANA,GAAM,CAACC,GAAD,EAAMC,IAAN,EAAe;AACzB,WAAOR,KAAKK,SAAL,EAAgBI,KAAhB,CAAsB,EAAEF,QAAF,EAAtB,EAA+BG,KAA/B,CAAqC,CAArC,EAAwCC,IAAxC,GAA+CL,GAA/C,CAAmD,CAAnD,EAAsDK,IAAtD,CAA2D,eAAO;AACvE,UAAI,CAACC,GAAL,EAAU;AACR,eAAO,IAAP;AACD;;AAED,UAAMC,MAAMC,KAAKC,KAAL,CAAWH,IAAII,KAAf,CAAZ;AACA,UAAI,CAACR,IAAL,EAAW;AACT,eAAOK,GAAP;AACD;;AAED,aAAO,iBAAEI,EAAF,CAAKJ,GAAL,EAAU,CAACL,IAAD,CAAV,EAAkB,CAAlB,CAAP;AACD,KAXM,CAAP;AAYD,GAbD;;AAeA,MAAMU,MAAM,SAANA,GAAM,CAACX,GAAD,EAAMS,KAAN,EAAaR,IAAb,EAAsB;AAChC,QAAMW,MAAM,uBAAQnB,IAAR,EAAcoB,IAAd,CAAmBD,GAAnB,EAAZ;;AAEA,QAAME,WAAW,SAAXA,QAAW,MAAO;AACtB,UAAIb,IAAJ,EAAU;AACR,yBAAEU,GAAF,CAAML,GAAN,EAAWL,IAAX,EAAiBQ,KAAjB;AACA,eAAOH,GAAP;AACD,OAHD,MAGO;AACL,eAAOG,KAAP;AACD;AACF,KAPD;;AASA,WAAOV,IAAIC,GAAJ,EACNI,IADM,CACD,oBAAY;AAChB,aAAOT,iBACNS,IADM,CACD,YAAM;AACV,YAAIW,QAAJ,EAAc;AACZ,cAAMC,SAASF,SAASG,OAAOC,MAAP,CAAc,EAAd,EAAkBH,QAAlB,CAAT,CAAf;AACA,iBAAOtB,KAAKK,SAAL,EAAgBI,KAAhB,CAAsB,EAAEF,QAAF,EAAtB,EAA+BmB,MAA/B,CAAsC;AAC3CV,mBAAOF,KAAKa,SAAL,CAAeJ,MAAf,CADoC;AAE3CK,yBAAaT;AAF8B,WAAtC,EAGJR,IAHI,EAAP;AAID,SAND,MAMO;AACL,cAAME,MAAMQ,SAAS,EAAT,CAAZ;AACA,iBAAOrB,KAAKK,SAAL,EAAgBwB,MAAhB,CAAuB;AAC5BtB,iBAAKA,GADuB;AAE5BS,mBAAOF,KAAKa,SAAL,CAAed,GAAf,CAFqB;AAG5Be,yBAAaT;AAHe,WAAvB,EAIJR,IAJI,EAAP;AAKD;AACF,OAhBM,CAAP;AAiBD,KAnBM,CAAP;AAoBD,GAhCD;;AAkCA,MAAMmB,YAAY,SAAZA,SAAY,GAAM;AACtB,WAAO,uBAAQ9B,IAAR,EAAc+B,sBAAd,CAAqC1B,SAArC,EAAgD,UAAS2B,KAAT,EAAgB;AACrEA,YAAMC,MAAN,CAAa,KAAb,EAAoBC,OAApB;AACAF,YAAMG,IAAN,CAAW,OAAX;AACAH,YAAMI,SAAN,CAAgB,aAAhB;AACD,KAJM,CAAP;AAKD,GAND;;AAQA,SAAO,EAAE9B,QAAF,EAAOY,QAAP,EAAYY,oBAAZ,EAAP;AACD,CA9DD","file":"kvs.js","sourcesContent":["import Promise from 'bluebird'\nimport _ from 'lodash'\n\nimport helpers from './helpers'\n\n/*\n  Possible options:\n    - betweenGetAndSetCallback: will be called between the get and the set\n    and wait for promise to resolve\n    - tableName: overrides the KVS table's name\n*/\nmodule.exports = (knex, options = {}) => {\n  const getSetCallback = options.betweenGetAndSetCallback || (() => Promise.resolve())\n  const tableName = options.tableName || 'kvs'\n\n  const get = (key, path) => {\n    return knex(tableName).where({ key }).limit(1).then().get(0).then(row => {\n      if (!row) {\n        return null\n      }\n\n      const obj = JSON.parse(row.value)\n      if (!path) {\n        return obj\n      }\n\n      return _.at(obj, [path])[0]\n    })\n  }\n\n  const set = (key, value, path) => {\n    const now = helpers(knex).date.now()\n\n    const setValue = obj => {\n      if (path) {\n        _.set(obj, path, value)\n        return obj\n      } else {\n        return value\n      }\n    }\n\n    return get(key)\n    .then(original => {\n      return getSetCallback()\n      .then(() => {\n        if (original) {\n          const newObj = setValue(Object.assign({}, original))\n          return knex(tableName).where({ key }).update({\n            value: JSON.stringify(newObj),\n            modified_on: now\n          }).then()\n        } else {\n          const obj = setValue({})\n          return knex(tableName).insert({\n            key: key,\n            value: JSON.stringify(obj),\n            modified_on: now\n          }).then()\n        }\n      })\n    })\n  }\n\n  const bootstrap = () => {\n    return helpers(knex).createTableIfNotExists(tableName, function(table) {\n      table.string('key').primary()\n      table.text('value')\n      table.timestamp('modified_on')\n    })\n  }\n\n  return { get, set, bootstrap }\n}\n"]}