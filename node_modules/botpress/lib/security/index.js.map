{"version":3,"sources":["../../src/security/index.js"],"names":["module","exports","dataLocation","securityConfig","db","authentication","tokenExpiry","login","user","password","ip","attempt","canAttempt","success","reason","authenticate","loginUser","getSecret","secret","token","sign","expiresIn","decoded","verify","roles","includes"],"mappings":";;AAAA;;;;AACA;;;;AAEA;;;;;;;;AAAoD;;AAEpD;;;;;;;;;;;;AAYAA,OAAOC,OAAP,GAAiB,gBAA0C;AAAA,MAAvCC,YAAuC,QAAvCA,YAAuC;AAAA,MAAzBC,cAAyB,QAAzBA,cAAyB;AAAA,MAATC,EAAS,QAATA,EAAS;;;AAEzD,MAAMC,iBAAiB,oCAAe,EAAEH,0BAAF,EAAgBC,8BAAhB,EAAgCC,MAAhC,EAAf,CAAvB;AAFyD,MAGjDE,WAHiD,GAGjCH,cAHiC,CAGjDG,WAHiD;;AAKzD;AACA;;AACA,MAAMC;AAAA,0DAAQ,iBAAeC,IAAf,EAAqBC,QAArB;AAAA,UAA+BC,EAA/B,uEAAoC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACaL,eAAeM,OAAf,CAAuBD,EAAvB,CADb;;AAAA;AACNE,wBADM;;AAAA,kBAEPA,UAFO;AAAA;AAAA;AAAA;;AAAA,+CAGH,EAAEC,SAAS,KAAX,EAAkBC,QAAQ,2CAA1B,EAHG;;AAAA;AAAA;AAAA,qBAMYT,eAAeU,YAAf,CAA4BP,IAA5B,EAAkCC,QAAlC,EAA4CC,EAA5C,CANZ;;AAAA;AAMNM,uBANM;;AAAA,mBAQRA,SARQ;AAAA;AAAA;AAAA;;AAAA;AAAA,qBASWX,eAAeY,SAAf,EATX;;AAAA;AASJC,oBATI;AAAA,+CAWH;AACLL,yBAAS,IADJ;AAELM,uBAAO,uBAAIC,IAAJ,CAAS,EAAEZ,MAAMQ,SAAR,EAAT,EAA8BE,MAA9B,EAAsC,EAAEG,WAAWf,WAAb,EAAtC;AAFF,eAXG;;AAAA;AAAA,+CAgBH;AACLO,yBAAS,KADJ;AAELC,wBAAQ;AAFH,eAhBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,KAAN;;AAuBA;;;;AAIA,MAAMC;AAAA,0DAAe,kBAAeI,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEId,eAAeY,SAAf,EAFJ;;AAAA;AAEXC,oBAFW;AAGXI,qBAHW,GAGD,uBAAIC,MAAJ,CAAWJ,KAAX,EAAkBD,MAAlB,CAHC;AAAA,gDAIVI,QAAQd,IAAR,IAAgBc,QAAQd,IAAR,CAAagB,KAA7B,IAAsC,iBAAEC,QAAF,CAAWH,QAAQd,IAAR,CAAagB,KAAxB,EAA+B,OAA/B,CAJ5B;;AAAA;AAAA;AAAA;AAAA,gDAMV,KANU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA,KAAN;;AAUA,SAAO;AACLjB,gBADK;AAELQ,8BAFK;AAGLE,eAAWZ,eAAeY;AAHrB,GAAP;AAKD,CAjDD","file":"index.js","sourcesContent":["import jwt from 'jsonwebtoken'\nimport _ from 'lodash'\n\nimport Authentication from './basic_authentication' // BPEE\n\n/**\n * Security helper for botpress\n *\n * Constructor of following functions\n *\n *   - login(user, password, ip)\n *   - authenticate(token)\n *   - getSecret()\n *\n * It will find or create a secret.key in `dataLocation`, then setup the adminPassword for user login.\n *\n */\nmodule.exports = ({ dataLocation, securityConfig, db }) => {\n\n  const authentication = Authentication({ dataLocation, securityConfig, db })\n  const { tokenExpiry } = securityConfig\n\n  // login function that returns a {success, reason, token} object\n  // accounts for number of bad attempts\n  const login = async function(user, password, ip = 'all') {\n    const canAttempt = await authentication.attempt(ip)\n    if (!canAttempt) {\n      return { success: false, reason: 'Too many login attempts. Try again later.' }\n    }\n\n    const loginUser = await authentication.authenticate(user, password, ip)\n\n    if (loginUser) {\n      const secret = await authentication.getSecret()\n\n      return {\n        success: true,\n        token: jwt.sign({ user: loginUser }, secret, { expiresIn: tokenExpiry })\n      }\n    } else {\n      return {\n        success: false,\n        reason: 'Bad username / password'\n      }\n    }\n  }\n\n  /**\n   * @param {string} token\n   * @return {boolean} whether the token is valid\n   */\n  const authenticate = async function(token) {\n    try {\n      const secret = await authentication.getSecret()\n      const decoded = jwt.verify(token, secret)\n      return decoded.user && decoded.user.roles && _.includes(decoded.user.roles, 'admin')\n    } catch (err) {\n      return false\n    }\n  }\n\n  return {\n    login,\n    authenticate,\n    getSecret: authentication.getSecret\n  }\n}\n"]}