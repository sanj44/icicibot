{"version":3,"sources":["../../src/security/basic_authentication.js"],"names":["module","exports","dataLocation","securityConfig","secret","secretPath","join","createNewSecret","randomBytes","toString","writeFileSync","existsSync","readFileSync","length","adminPassword","process","env","BOTPRESS_ADMIN_PASSWORD","password","attempts","lastCleanTimestamp","Date","maxAttempts","resetAfter","attempt","ip","authenticate","user","toLowerCase","id","email","first_name","last_name","avatar_url","roles","getSecret","resetSecret","method"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,OAAOC,OAAP,GAAiB,gBAAsC;AAAA,MAAnCC,YAAmC,QAAnCA,YAAmC;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;;;AAErD;AACA,MAAIC,SAAS,EAAb;AACA,MAAMC,aAAa,eAAKC,IAAL,CAAUJ,YAAV,EAAwB,YAAxB,CAAnB;;AAEA,MAAMK,kBAAkB,SAAlBA,eAAkB,GAAM;AAC5BH,aAAS,iBAAOI,WAAP,CAAmB,GAAnB,EAAwBC,QAAxB,EAAT;AACA,iBAAGC,aAAH,CAAiBL,UAAjB,EAA6BD,MAA7B;AACA,WAAOA,MAAP;AACD,GAJD;;AAMA,MAAI,aAAGO,UAAH,CAAcN,UAAd,CAAJ,EAA+B;AAC7BD,aAAS,aAAGQ,YAAH,CAAgBP,UAAhB,CAAT;AACD;;AAED,MAAI,CAACD,MAAD,IAAWA,OAAOS,MAAP,GAAgB,EAA/B,EAAmC;AACjCT,aAASG,iBAAT;AACD;;AAED,MAAMO,gBAAgBC,QAAQC,GAAR,CAAYC,uBAAZ,IAAuCd,eAAee,QAA5E;;AAEA;AACA,MAAIC,WAAW,EAAf;AACA,MAAIC,qBAAqB,IAAIC,IAAJ,EAAzB;AAxBqD,MAyB7CC,WAzB6C,GAyBjBnB,cAzBiB,CAyB7CmB,WAzB6C;AAAA,MAyBhCC,UAzBgC,GAyBjBpB,cAzBiB,CAyBhCoB,UAzBgC;;;AA2BrD,WAASC,OAAT,CAAiBC,EAAjB,EAAqB;AACnB;AACA,QAAI,IAAIJ,IAAJ,KAAaD,kBAAb,IAAmCG,UAAvC,EAAmD;AACjDJ,iBAAW,EAAX;AACAC,2BAAqB,IAAIC,IAAJ,EAArB;AACD;;AAED,WAAO,CAACF,SAASM,EAAT,KAAgB,CAAjB,IAAsBH,WAA7B;AACD;;AAED,WAASI,YAAT,CAAsBC,IAAtB,EAA4BT,QAA5B,EAAsCO,EAAtC,EAA0C;AACxC,QAAI,OAAOE,IAAP,KAAiB,QAAjB,IAA6BA,KAAKC,WAAL,OAAuB,OAApD,IACF,OAAOV,QAAP,KAAqB,QADnB,IAC+BA,aAAaJ,aADhD,EAC+D;AAC7DK,eAASM,EAAT,IAAe,CAAf;AACA,aAAO;AACLI,YAAI,CADC;AAELC,eAAO,mBAFF;AAGLC,oBAAY,OAHP;AAILC,mBAAW,OAJN;AAKLC,oBAAY,IALP;AAMLC,eAAO,CAAC,OAAD;AANF,OAAP;AAQD,KAXD,MAWO;AACLf,eAASM,EAAT,IAAe,CAACN,SAASM,EAAT,KAAgB,CAAjB,IAAsB,CAArC;AACA,aAAO,IAAP;AACD;AACF;;AAED,WAASU,SAAT,GAAqB;AACnB,WAAO/B,MAAP;AACD;;AAED,WAASgC,WAAT,GAAuB;AACrB,WAAO7B,iBAAP;AACD;;AAED;AACA,SAAO;AACLiB,aAAS,mBAAQa,MAAR,CAAeb,OAAf,CADJ;AAELE,kBAAc,mBAAQW,MAAR,CAAeX,YAAf,CAFT;AAGLS,eAAW,mBAAQE,MAAR,CAAeF,SAAf,CAHN;AAILC,iBAAa,mBAAQC,MAAR,CAAeD,WAAf;AAJR,GAAP;AAMD,CAtED","file":"basic_authentication.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport crypto from 'crypto'\nimport Promise from 'bluebird'\n\nmodule.exports = ({ dataLocation, securityConfig }) => {\n\n  // reading secret from data or creating new secret\n  let secret = ''\n  const secretPath = path.join(dataLocation, 'secret.key')\n\n  const createNewSecret = () => {\n    secret = crypto.randomBytes(256).toString()\n    fs.writeFileSync(secretPath, secret)\n    return secret\n  }\n\n  if (fs.existsSync(secretPath)) {\n    secret = fs.readFileSync(secretPath)\n  }\n\n  if (!secret || secret.length < 15) {\n    secret = createNewSecret()\n  }\n\n  const adminPassword = process.env.BOTPRESS_ADMIN_PASSWORD || securityConfig.password\n\n  // a per-ip cache that logs login attempts\n  let attempts = {}\n  let lastCleanTimestamp = new Date()\n  const { maxAttempts, resetAfter } = securityConfig\n\n  function attempt(ip) {\n    // reset the cache if time elapsed\n    if (new Date() - lastCleanTimestamp >= resetAfter) {\n      attempts = {}\n      lastCleanTimestamp = new Date()\n    }\n\n    return (attempts[ip] || 0) < maxAttempts\n  }\n\n  function authenticate(user, password, ip) {\n    if (typeof(user) === 'string' && user.toLowerCase() === 'admin' &&\n      typeof(password) === 'string' && password === adminPassword) {\n      attempts[ip] = 0\n      return {\n        id: 0,\n        email: 'admin@botpress.io',\n        first_name: 'Admin',\n        last_name: 'Admin',\n        avatar_url: null,\n        roles: ['admin']\n      }\n    } else {\n      attempts[ip] = (attempts[ip] || 0) + 1\n      return null\n    }\n  }\n\n  function getSecret() {\n    return secret\n  }\n\n  function resetSecret() {\n    return createNewSecret()\n  }\n\n  // Public API\n  return {\n    attempt: Promise.method(attempt),\n    authenticate: Promise.method(authenticate),\n    getSecret: Promise.method(getSecret),\n    resetSecret: Promise.method(resetSecret)\n  }\n}\n"]}