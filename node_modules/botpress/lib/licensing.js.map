{"version":3,"sources":["../src/licensing.js"],"names":["module","exports","projectLocation","licensesPath","join","__dirname","getLicenses","packageJsonPath","JSON","parse","readFileSync","license","agplContent","toString","botpressContent","agpl","name","licensedUnder","text","botpress","changeLicense","method","licensePath","licenseFileName","licenseContent","pkg","writeFileSync","stringify","middleware","hear","event","next","author","bp","response","version","userId","user","id","platform","sendText","middlewares","sendOutgoing","type","raw","to","message","responseTo"],"mappings":"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","file":"licensing.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport Promise from 'bluebird'\n\nimport listeners from './listeners'\nimport { resolveProjectFile } from './util'\n\nmodule.exports = (projectLocation) => {\n\n  const licensesPath = path.join(__dirname, '../licenses')\n\n  const getLicenses = () => {\n    const packageJsonPath = resolveProjectFile('package.json', projectLocation, true)\n    const { license } = JSON.parse(fs.readFileSync(packageJsonPath))\n\n    const agplContent = fs.readFileSync(path.join(licensesPath, 'LICENSE_AGPL3')).toString()\n    const botpressContent = fs.readFileSync(path.join(licensesPath, 'LICENSE_BOTPRESS')).toString()\n\n    return {\n      agpl: {\n        name: 'AGPL-3.0',\n        licensedUnder: license === 'AGPL-3.0',\n        text: agplContent\n      },\n      botpress: {\n        name: 'Botpress',\n        licensedUnder: license === 'Botpress',\n        text: botpressContent\n      }\n    }\n  }\n\n  const changeLicense = Promise.method((license) => {\n    const packageJsonPath = resolveProjectFile('package.json', projectLocation, true)\n\n    const licensePath = resolveProjectFile('LICENSE', projectLocation, true)\n    const licenseFileName = (license === 'AGPL-3.0') ? 'LICENSE_AGPL3' : 'LICENSE_BOTPRESS'\n    const licenseContent = fs.readFileSync(path.join(licensesPath, licenseFileName))\n\n    const pkg = JSON.parse(fs.readFileSync(packageJsonPath))\n    pkg.license = license\n\n    fs.writeFileSync(licensePath, licenseContent)\n    fs.writeFileSync(packageJsonPath, JSON.stringify(pkg, null, 2))\n  })\n\n  const middleware = listeners.hear(/^BOT_LICENSE$/, (event, next) => {\n    const packageJsonPath = resolveProjectFile('package.json', projectLocation, true)\n    const { license, name, author } = JSON.parse(fs.readFileSync(packageJsonPath))\n    const bp = event.bp\n\n    const response = `Bot:  ${name}\n      Created by: ${author}\n      License: ${license}\n      Botpress: ${bp.version}`\n\n    const userId = event.user && event.user.id\n\n    if (bp[event.platform] && bp[event.platform].sendText) {\n      bp[event.platform].sendText(userId, response)\n    } else {\n      bp.middlewares.sendOutgoing({\n        platform: event.platform,\n        type: 'text',\n        text: response,\n        raw: {\n          to: userId,\n          message: response,\n          responseTo: event\n        }\n      })\n    }\n  })\n\n  return {\n    getLicenses,\n    changeLicense,\n    middleware\n  }\n}\n"]}