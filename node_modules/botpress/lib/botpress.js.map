{"version":3,"sources":["../src/botpress.js"],"names":["RESTART_EXIT_CODE","getDataLocation","dataDir","projectLocation","isAbsolute","resolve","mkdirIfNeeded","path","logger","existsSync","info","mkdirSync","err","error","message","process","exit","botpress","botfile","version","dirname","require","stats","interval","track","inverval","setInterval","chdir","join","__dirname","isFirstRun","dataLocation","modulesConfigDir","dbLocation","log","db","sqlite","location","postgres","security","securityConfig","login","modules","kvs","moduleDefinitions","_scan","events","notifications","notification","about","licensing","middlewares","hear","hearMiddleware","middleware","register","assign","loadedModules","_load","length","_loadedModules","server","start","projectEntry","call","on","stack","trackException","reason","p","isMaster","fork","worker","code","isWorker","_start","setTimeout","module","exports"],"mappings":"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","file":"botpress.js","sourcesContent":["import 'source-map-support/register'\n\nimport path from 'path'\nimport fs from 'fs'\nimport _ from 'lodash'\nimport cluster from 'cluster'\n\nimport EventBus from './bus'\n\nimport createMiddlewares from './middlewares'\nimport createLogger from './logger'\nimport createSecurity from './security'\nimport createNotifications from './notifications'\nimport createHearMiddleware from './hear'\nimport createDatabase from './database'\nimport createLicensing from './licensing'\nimport createAbout from './about'\nimport createModules from './modules'\nimport stats from './stats'\nimport packageJson from '../package.json'\n\nimport WebServer from './server'\n\nimport { getBotpressVersion } from './util'\n\nimport {\n  isDeveloping,\n  print\n} from './util'\n\nconst RESTART_EXIT_CODE = 107\n\nconst getDataLocation = (dataDir, projectLocation) => (\n  dataDir && path.isAbsolute(dataDir)\n    ? path.resolve(dataDir)\n    : path.resolve(projectLocation, dataDir || 'data')\n)\n\nconst mkdirIfNeeded = (path, logger) => {\n  if (!fs.existsSync(path)) {\n    logger.info(`Creating data directory: ${path}`)\n\n    try {\n      fs.mkdirSync(path)\n    } catch (err) {\n      logger.error(`[FATAL] Error creating directory: ${err.message}`)\n      process.exit(1)\n    }\n  }\n}\n\n/**\n * Global context botpress\n*/\nclass botpress {\n  /**\n   * Create botpress\n   *\n   * @param {string} obj.botfile - the config path\n   */\n  constructor({ botfile }) {\n    this.version = getBotpressVersion()\n    /**\n     * The project location, which is the folder where botfile.js located\n     */\n    this.projectLocation = path.dirname(botfile)\n\n    /**\n     * The botfile config object\n     */\n    this.botfile = require(botfile)\n\n    this.stats = stats(this.botfile)\n\n    this.interval = null\n  }\n\n  /**\n   * Start the bot instance\n   *\n   * It will do the following initiation steps:\n   *\n   * 1. setup logger\n   * 2. resolve paths (dataLocation)\n   * 3. inject security functions\n   * 4. load modules\n   */\n  _start() {\n\n    this.stats.track('bot', 'started')\n\n    if (!this.interval) {\n      this.inverval = setInterval(() => {\n        this.stats.track('bot', 'running')\n      }, 30 * 1000)\n    }\n\n    // change the current working directory to botpress's installation path\n    // the bot's location is kept in this.projectLocation\n    process.chdir(path.join(__dirname, '../'))\n\n    const { projectLocation, botfile } = this\n\n    const isFirstRun = fs.existsSync(path.join(projectLocation, '.welcome'))\n    const dataLocation = getDataLocation(botfile.dataDir, projectLocation)\n    const modulesConfigDir = getDataLocation(botfile.modulesConfigDir, projectLocation)\n    const dbLocation = path.join(dataLocation, 'db.sqlite')\n    const version = packageJson.version\n\n    const logger = createLogger(dataLocation, botfile.log)\n    mkdirIfNeeded(dataLocation, logger)\n    mkdirIfNeeded(modulesConfigDir, logger)\n\n    logger.info(`Starting botpress version ${version}`)\n\n    const db = createDatabase({\n      sqlite: { location: dbLocation },\n      postgres: botfile.postgres\n    })\n\n    const security = createSecurity({\n      dataLocation,\n      securityConfig: botfile.login,\n      db\n    })\n\n    const modules = createModules(logger, projectLocation, dataLocation, db.kvs)\n\n    const moduleDefinitions = modules._scan()\n\n    const events = new EventBus()\n    const notifications = createNotifications(dataLocation, botfile.notification, moduleDefinitions, events, logger)\n    const about = createAbout(projectLocation)\n    const licensing = createLicensing(projectLocation)\n    const middlewares = createMiddlewares(this, dataLocation, projectLocation, logger)\n    const { hear, middleware: hearMiddleware } = createHearMiddleware()\n\n    middlewares.register(hearMiddleware)\n\n    _.assign(this, {\n      dataLocation,\n      isFirstRun,\n      version,\n      logger,\n      security, // login, authenticate, getSecret\n      events,\n      notifications,    // load, save, send\n      about,\n      middlewares,\n      hear,\n      licensing,\n      modules,\n      db\n    })\n\n    const loadedModules = modules._load(moduleDefinitions, this)\n\n    this.stats.track('bot', 'modules', 'loaded', loadedModules.length)\n\n    _.assign(this, {\n      _loadedModules: loadedModules\n    })\n\n    const server = new WebServer({ botpress: this })\n    server.start()\n\n    const projectEntry = require(projectLocation)\n    if (typeof(projectEntry) === 'function') {\n      projectEntry.call(projectEntry, this)\n    } else {\n      logger.error('[FATAL] The bot entry point must be a function that takes an instance of bp')\n      process.exit(1)\n    }\n\n    process.on('uncaughtException', err => {\n      logger.error('[FATAL] An unhandled exception occured in your bot', err)\n      if (isDeveloping) {\n        logger.error(err.stack)\n      }\n\n      this.stats.trackException(err.message)\n      process.exit(1)\n    })\n\n    process.on('unhandledRejection', (reason, p) => {\n      logger.error('Unhandled Rejection in Promise: ', p, 'Reason:', reason)\n\n      this.stats.trackException(reason)\n      if (isDeveloping && reason && reason.stack) {\n        logger.error(reason.stack)\n      }\n    })\n  }\n\n  start() {\n    if (cluster.isMaster) {\n      cluster.fork()\n\n      cluster.on('exit', (worker, code /* , signal */) => {\n        if (code === RESTART_EXIT_CODE) {\n          cluster.fork()\n\n          this.stats.track('bot', 'restarted')\n          print('info', '*** restarted worker process ***')\n        } else {\n          process.exit(code)\n        }\n      })\n    }\n\n    if (cluster.isWorker) {\n      this._start()\n    }\n  }\n\n  restart(interval = 0) {\n    setTimeout(() => {\n      process.exit(RESTART_EXIT_CODE)\n    }, interval)\n  }\n}\n\nmodule.exports = botpress\n"]}