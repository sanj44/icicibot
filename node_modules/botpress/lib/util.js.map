{"version":3,"sources":["../src/util.js"],"names":["IS_DEV","process","env","NODE_ENV","NPM_CMD","test","platform","print","args","mapping","info","white","warn","yellow","arguments","error","red","success","green","level","matched","splice","console","log","black","bgWhite","resolveFromDir","fromDir","moduleId","resolve","fromFile","join","_resolveFilename","id","filename","paths","_nodeModulePaths","err","resolveModuleRootPath","entryPath","current","dirname","lookup","existsSync","resolveProjectFile","file","projectLocation","throwIfNotExist","packagePath","Error","getBotpressVersion","botpressPackagePath","__dirname","botpressJson","JSON","parse","readFileSync","version","module","exports","isDeveloping","npmCmd"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAASC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAxC;;AAEA,IAAMC,UAAU,OAAOC,IAAP,CAAYJ,QAAQK,QAApB,IAAgC,SAAhC,GAA4C,KAA5D;;AAEA,IAAMC,QAAQ,SAARA,KAAQ,GAAkB;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AAC9B,MAAMC,UAAU;AACdC,UAAM,gBAAMC,KADE;AAEdC,UAAM,gBAAW;AAAE,aAAO,gBAAMC,MAAN,yBAAa,MAAb,oCAAwBC,SAAxB,GAAP;AAA2C,KAFhD;AAGdC,WAAO,iBAAW;AAAE,aAAO,gBAAMC,GAAN,yBAAU,KAAV,oCAAoBF,SAApB,GAAP;AAAuC,KAH7C;AAIdG,aAAS,mBAAW;AAAE,aAAO,gBAAMC,KAAN,yBAAY,IAAZ,oCAAqBJ,SAArB,GAAP;AAAwC;AAJhD,GAAhB;;AAOA,MAAIK,QAAQV,QAAQD,KAAK,CAAL,CAAR,CAAZ;AACA,MAAMY,UAAU,CAAC,CAACD,KAAlB;;AAEA,MAAI,CAACC,OAAL,EAAc;AACZD,YAAQV,QAAQC,IAAhB;AACD,GAFD,MAEO;AACLF,SAAKa,MAAL,CAAY,CAAZ,EAAe,CAAf;AACD;;AAEDC,UAAQC,GAAR,CAAY,gBAAMC,KAAN,CAAYC,OAAZ,CAAoB,YAApB,CAAZ,EAA+C,IAA/C,EAAqDN,uBAASX,IAAT,CAArD;AACD,CAlBD;;AAoBA,IAAMkB,iBAAiB,SAAjBA,cAAiB,CAAUC,OAAV,EAAmBC,QAAnB,EAA6B;AAClDD,YAAU,eAAKE,OAAL,CAAaF,OAAb,CAAV;AACA,MAAMG,WAAW,eAAKC,IAAL,CAAUJ,OAAV,EAAmB,SAAnB,CAAjB;AACA,MAAI;AACH,WAAO,iBAAOK,gBAAP,CAAwBJ,QAAxB,EAAkC;AACxCK,UAAIH,QADoC;AAExCI,gBAAUJ,QAF8B;AAGxCK,aAAO,iBAAOC,gBAAP,CAAwBT,OAAxB;AAHiC,KAAlC,CAAP;AAKA,GAND,CAME,OAAOU,GAAP,EAAY;AACb,WAAO,IAAP;AACA;AACF,CAZD;;AAcA,IAAMC,wBAAwB,SAAxBA,qBAAwB,CAASC,SAAT,EAAoB;AAChD,MAAIC,UAAU,eAAKC,OAAL,CAAaF,SAAb,CAAd;AACA,SAAOC,YAAY,GAAnB,EAAwB;AACtB,QAAME,SAAS,eAAKX,IAAL,CAAUS,OAAV,EAAmB,cAAnB,CAAf;AACA,QAAI,aAAGG,UAAH,CAAcD,MAAd,CAAJ,EAA2B;AACzB,aAAOF,OAAP;AACD;AACDA,cAAU,eAAKX,OAAL,CAAa,eAAKE,IAAL,CAAUS,OAAV,EAAmB,IAAnB,CAAb,CAAV;AACD;AACD,SAAO,IAAP;AACD,CAVD;;AAYA,IAAMI,qBAAqB,SAArBA,kBAAqB,CAACC,IAAD,EAAOC,eAAP,EAAwBC,eAAxB,EAA4C;AACrE,MAAMC,cAAc,eAAKnB,OAAL,CAAaiB,mBAAmB,IAAhC,EAAsCD,IAAtC,CAApB;;AAEA,MAAI,CAAC,aAAGF,UAAH,CAAcK,WAAd,CAAL,EAAiC;AAC/B,QAAID,eAAJ,EAAqB;AACnB,YAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;AACD,WAAO,IAAP;AACD;;AAED,SAAOD,WAAP;AACD,CAXD;;AAaA,IAAME,qBAAqB,SAArBA,kBAAqB,GAAM;AAC/B,MAAMC,sBAAsB,eAAKpB,IAAL,CAAUqB,SAAV,EAAqB,iBAArB,CAA5B;AACA,MAAMC,eAAeC,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAgBL,mBAAhB,CAAX,CAArB;AACA,SAAOE,aAAaI,OAApB;AACD,CAJD;;AAMAC,OAAOC,OAAP,GAAiB;AACfpD,cADe;AAEfmB,gCAFe;AAGfkC,gBAAc5D,MAHC;AAIfsC,8CAJe;AAKfM,wCALe;AAMfiB,UAAQzD,OANO;AAOf8C;AAPe,CAAjB","file":"util.js","sourcesContent":["import chalk from 'chalk'\nimport path from 'path'\nimport Module from 'module'\nimport fs from 'fs'\n\nconst IS_DEV = process.env.NODE_ENV !== 'production'\n\nconst NPM_CMD = /^win/.test(process.platform) ? 'npm.cmd' : 'npm'\n\nconst print = function(...args) {\n  const mapping = {\n    info: chalk.white,\n    warn: function() { return chalk.yellow('WARN', ...arguments) },\n    error: function() { return chalk.red('ERR', ...arguments) },\n    success: function() { return chalk.green('OK', ...arguments) }\n  }\n\n  let level = mapping[args[0]]\n  const matched = !!level\n\n  if (!matched) {\n    level = mapping.info\n  } else {\n    args.splice(0, 1)\n  }\n\n  console.log(chalk.black.bgWhite('[botpress]'), '\\t', level(...args))\n}\n\nconst resolveFromDir = function (fromDir, moduleId) {\n  fromDir = path.resolve(fromDir)\n  const fromFile = path.join(fromDir, 'noop.js')\n  try {\n  \treturn Module._resolveFilename(moduleId, {\n  \t\tid: fromFile,\n  \t\tfilename: fromFile,\n  \t\tpaths: Module._nodeModulePaths(fromDir)\n  \t})\n  } catch (err) {\n  \treturn null\n  }\n}\n\nconst resolveModuleRootPath = function(entryPath) {\n  let current = path.dirname(entryPath)\n  while (current !== '/') {\n    const lookup = path.join(current, 'package.json')\n    if (fs.existsSync(lookup)) {\n      return current\n    }\n    current = path.resolve(path.join(current, '..'))\n  }\n  return null\n}\n\nconst resolveProjectFile = (file, projectLocation, throwIfNotExist) => {\n  const packagePath = path.resolve(projectLocation || './', file)\n\n  if (!fs.existsSync(packagePath)) {\n    if (throwIfNotExist) {\n      throw new Error('Could not find bot\\'s package.json file')\n    }\n    return null\n  }\n\n  return packagePath\n}\n\nconst getBotpressVersion = () => {\n  const botpressPackagePath = path.join(__dirname, '../package.json')\n  const botpressJson = JSON.parse(fs.readFileSync(botpressPackagePath))\n  return botpressJson.version\n}\n\nmodule.exports = {\n  print,\n  resolveFromDir,\n  isDeveloping: IS_DEV,\n  resolveModuleRootPath,\n  resolveProjectFile,\n  npmCmd: NPM_CMD,\n  getBotpressVersion\n}\n"]}